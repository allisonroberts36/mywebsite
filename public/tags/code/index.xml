<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Allison Roberts</title>
    <link>/tags/code/</link>
    <description>Recent content in Code on Allison Roberts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Visualizing Hospital Networks</title>
      <link>/posts/visualizing-hospital-networks/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/visualizing-hospital-networks/</guid>
      <description>##Visualizing a Network My goal is to build an interactive network model that jiggles and is generally fun. I ended up exporting the final product into Shiny, and it looks like this: 
Below, Iâ€™ll show you how I created this project, starting with a similarity matrix of hospital websites and a list of hospital attributes. To see how I created the similarity matrix, check out Part One.</description>
    </item>
    
    <item>
      <title>Scraping Websites</title>
      <link>/posts/scraping-websites/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/scraping-websites/</guid>
      <description>The following code scrapes a list of websites using Python. Most of the explanations are provided within the code as comments.
We first import a few packages to assist with scraping, and set the working directory.
#Import Packages import requests from bs4 import BeautifulSoup import lxml import os import re import pandas as pd import numpy as np from urllib.parse import urljoin #Set Working Directory os.getcwd() os.chdir(&amp;#34;Your/File/Path/Here&amp;#34;) Once the environment is set up, I wrote a variety of functions to conduct different type of scrapes.</description>
    </item>
    
  </channel>
</rss>